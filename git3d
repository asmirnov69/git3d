#!/usr/bin/python3

import argparse
import sys, os.path, shutil, glob
import subprocess, shlex
import getpass

"""
session example:
git add --dry-run -u
git status -s .
git add -u # all mods go to index tree
git status -s .
git write-tree # writes index tree to gitdb, output d739bbe73b2628cf984bd930bc4637dd9789a145
git commit-tree -m 'test merge' -p b5592e193af10b246a5e2de25c9777eb746c80df -p 9b8dfe5cb85d82edd1a2ab259519ac9d17cc19b9 d739bbe73b2628cf984bd930bc4637dd9789a145 # -- creates new commit in gitdb, gives output 1de0018070957e4b7ae2dc3e74ad5e44d809f1a0
git reset --soft 1de0018070957e4b7ae2dc3e74ad5e44d809f1a0 # head moves to new commit
"""


"""
returns True if:
 - cwd is git tracked (git ls-tree HEAD)
 - no submodules
 - no local modifications
 - no merged (git ls-files --unmerged)
"""
def check_current_tree():
    return True

def get_tree_id(tree_id):
    cmd = f"git rev-parse {tree_id}"
    ret = subprocess.check_output(shlex.split(cmd))
    return ret.decode('ascii').strip()

def get_tree_id_pretty_print(tree_id):
    cmd = f"git show --no-color -s --oneline --pretty='%h %d %B' {tree_id}"
    ret = subprocess.check_output(shlex.split(cmd))
    return ret.decode('utf8').strip()

def get_common_ancentor_tree_id(target_tree_id, source_tree_id):
    cmd = f"git merge-base {target_tree_id} {source_tree_id}"
    ret = subprocess.check_output(shlex.split(cmd))
    return ret.decode('ascii').strip()

def cleanup_tempdir():
    temp_dir_root = "/var/tmp/git3w-trees"
    if os.path.exists(temp_dir_root):
        shutil.rmtree(temp_dir_root)
        os.makedirs(temp_dir_root)
        
def load_tree(tree_id, tree_dirname_prefix, dry_run):
    temp_dir_root = os.path.join("/var/tmp/git3w-trees", getpass.getuser())
    if not os.path.exists(temp_dir_root):
        os.makedirs(temp_dir_root)
    tree_dirname = tree_dirname_prefix + "--" + tree_id
    tree_dir = os.path.join(temp_dir_root, tree_dirname)
    cmd = f"git archive --format=tar --prefix={tree_dirname}/ {tree_id} | (cd {temp_dir_root} && tar xf -)"

    if dry_run:
        print(cmd)
    else:
        ret = subprocess.check_output(cmd, shell = True)
        print(ret)
    return tree_dir

def list_temp_dir():
    temp_dir_root = os.path.join("/var/tmp/git3w-trees", getpass.getuser())
    files = glob.glob(os.path.join(temp_dir_root, '*'))
    ret_d = {}
    for f in files:
        if f.find("SOURCE--") != -1:
            ret_d["SOURCE"] = [f, os.path.basename(f).replace("SOURCE--", "")]
        elif f.find("BASE--") != -1:
            ret_d["BASE"] = [f, os.path.basename(f).replace("BASE--", "")]
    return ret_d
    
def do_show_trees(source_tree_id):
    target_tree_id = get_tree_id("HEAD")
    base_tree_id = get_common_ancentor_tree_id(target_tree_id, source_tree_id)
    if base_tree_id is None:
        raise Exception("can't find base tree for %s and %s" % (target_tree_id, source_tree_id))

    print("base_tree_id:\t", get_tree_id_pretty_print(base_tree_id))
    print("source_tree_id:\t", get_tree_id_pretty_print(source_tree_id))
    print("target_tree_id:\t", get_tree_id_pretty_print(target_tree_id))

def do_checkout_trees(source_tree_id, dry_run):
    if not check_current_tree():
        raise Exception("current tree check failed")

    if not dry_run:
        cleanup_tempdir()

    source_tree_id = get_tree_id(source_tree_id)
    target_tree_id = get_tree_id("HEAD")
    if source_tree_id == target_tree_id:
        raise Exception(f"source and target are the same commit {source_tree_id}")
    
    base_tree_id = get_common_ancentor_tree_id(target_tree_id, source_tree_id)
    if base_tree_id is None:
        raise Exception("can't find base tree for %s and %s" % (target_tree_id, source_tree_id))

    base_tree = load_tree(base_tree_id, "BASE", dry_run)
    source_tree = load_tree(source_tree_id, "SOURCE", dry_run)
    print("base tree:", base_tree)
    print("source tree:", source_tree)

def do_commit_merged_tree(message, dry_run):
    d = list_temp_dir()
    base_tree_id = d["BASE"][1]
    base_tree_id_pp = get_tree_id_pretty_print(base_tree_id)
    source_tree_id = d["SOURCE"][1]
    source_tree_id_pp = get_tree_id_pretty_print(source_tree_id)
    target_tree_id = get_tree_id('HEAD')
    target_tree_id_pp = get_tree_id_pretty_print(target_tree_id)
    
    message += "\n"
    message += f"TARGET:\t{target_tree_id_pp}\n"
    message += f"SOURCE:\t{source_tree_id_pp}\n"
    message += f"BASE:\t{base_tree_id_pp}\n"

    if not dry_run:
        subprocess.check_output(f"git add -u", shell = True)
        ret = subprocess.check_output(f"git write-tree", shell = True)
        new_tree_hash = ret.decode('ascii').strip()
        ret = subprocess.check_output(f"git commit-tree -m '{message}' -p {source_tree_id} -p {target_tree_id} {new_tree_hash}", shell = True)
        new_commit_hash = ret.decode('ascii').strip()
        subprocess.check_output(f"git reset --soft {new_commit_hash}", shell = True)
    else:
        print(message)
    
"""
git3d --help
git3d show-trees source-tree-id
git3d checkout-trees [--dry-run] source-tree-id
git3d ls
git3d commit-merged-tree [--dry-run] -m <text>
git3d recommit-merged-tree [--dry-run] [-m <text>]
git3d cleanup [--dry-run]
"""
if __name__ == "__main__":
    # useful argparse text: https://towardsdatascience.com/a-simple-guide-to-command-line-arguments-with-argparse-6824c30ab1c3    
    parser = argparse.ArgumentParser(description = "should help to do git three way diff and merge")
    subparser = parser.add_subparsers(dest = 'action')

    action_show_trees = subparser.add_parser('show-trees')
    action_show_trees.add_argument('tree-id')
    
    action_checkout_trees = subparser.add_parser('checkout-trees')
    action_checkout_trees.add_argument('--dry-run', action = 'store_true', required = False)
    action_checkout_trees.add_argument('tree-id')

    action_ls = subparser.add_parser('ls')

    action_commit_merged_tree = subparser.add_parser('commit-merged-tree')
    action_commit_merged_tree.add_argument('--dry-run', action = 'store_true', required = False)
    action_commit_merged_tree.add_argument('--message', '-m', type = str, required = True)
    
    args = parser.parse_args()

    if args.action == 'show-trees':
        args = vars(args)
        do_show_trees(args['tree-id'])
    elif args.action == 'checkout-trees':
        print("action: checkout-trees")
        args = vars(args)
        print(args)
        do_checkout_trees(args['tree-id'], args['dry_run'])
    elif args.action == 'ls':
        #print("action: ls")
        args = vars(args)
        d = list_temp_dir()
        print(" ".join([d["BASE"][0], d["SOURCE"][0], "."]))
    elif args.action == 'commit-merged-tree':
        args = vars(args)
        print(args)
        do_commit_merged_tree(args['message'], args['dry_run'])
        


