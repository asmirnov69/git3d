#!/usr/bin/python3
import os
import subprocess

def getoutput(cmd, cwd):
   e_code, output = subprocess.getstatusoutput(f"cd {cwd}; {cmd}")
   ret = output if e_code == 0 else None
   return ret if ret != "" else None

"""
git show -s --no-color --pretty='%S -- %H -- %D -- %s'
git branch --show-current # current branch
git tag --points-at HEAD # current tag
git show -s --format="%H" # current commit
git rev-parse --abbrev-ref master@{upstream} # tracking branch of master branch
"""

class RepoState:
   def __init__(self):
      self.dir_name = None
      self.url = None
      self.branch = None
      self.tag = None
      self.commit = None
      self.tracking_branch = None
      self.tracking_branch_commit = None
      self.is_modified = None

   def load_state(self, w_dir):
      self.dir_name = w_dir
      self.branch = getoutput(f"git branch --show-current", w_dir)         
      self.tracking_branch = getoutput(f"git rev-parse --abbrev-ref {self.branch}@{{upstream}}", w_dir) if self.branch else None
      self.tag = getoutput(f"git tag --points-at HEAD", w_dir)
      self.commit = getoutput(f"git show -s --format='%H'", w_dir)
      self.tracking_branch_commit = getoutput(f"git show -s --no-color --pretty='%H' {self.tracking_branch}", w_dir)
      self.url = getoutput(f"git remote get-url origin", w_dir)

      res = getoutput("git status --porcelain", w_dir)
      #print("porce:", w_dir, res)
      if res is None:
         self.is_modified = False
      else:
         if len(res) > 0:
            self.is_modified = True
         else:
            self.is_modified = False
      
   def show(self):
      print(f"{self.dir_name}: {self.is_modified} branch:{self.branch},tag:{self.tag},{self.commit} {self.tracking_branch},{self.tracking_branch_commit} {self.url}")
      
   def clone_repo(self):
      cmd = f"git clone {self.url} -b {self.branch} {self.dir_name}"
      print(cmd)
   
def dump_repos_state():
   dirs = os.listdir(os.getcwd())
   repo_states = []
   for w_dir in dirs:
      if not w_dir.startswith(".") and os.path.isdir(w_dir):
         repo_state = RepoState()
         repo_state.load_state(w_dir)
         repo_states.append(repo_state)

   return repo_states
                            

if __name__ == "__main__":
   repos = dump_repos_state()
   for repo in repos:
      repo.show()
   #print([repo.clone_repo() for repo in repos])
