#!/usr/bin/python3
#import ipdb
import sys, os, json
import subprocess

def getoutput(cmd, cwd):
   e_code, output = subprocess.getstatusoutput(f"cd {cwd}; {cmd}")
   ret = output if e_code == 0 else None
   return ret if ret != "" else None

"""
git show -s --no-color --pretty='%S -- %H -- %D -- %s'
git branch --show-current # current branch
git tag --points-at HEAD # current tag
git show -s --format="%H" # current commit
git rev-parse --abbrev-ref master@{upstream} # tracking branch of master branch


"""

class RepoState:
   def __init__(self):
      self.dir_name = None
      self.url = None
      self.branch = None
      self.commit = None
      self.is_modified = None
      self.is_detached_head = None
      self.has_tracking_branch = None
      self.repo_log = None
      
   def load_state(self, w_dir):
      self.dir_name = w_dir
      self.branch = getoutput(f"git branch --show-current", w_dir)         
      self.commit = getoutput(f"git show -s --format='%H'", w_dir)
      self.url = getoutput(f"git remote get-url origin", w_dir)
      self.repo_log = getoutput("git log -1 --pretty='%h %d: %s, %ad'", w_dir)
      
      res = getoutput("git status --porcelain", w_dir)
      if res is None:
         self.is_modified = False
      else:
         if len(res) > 0:
            self.is_modified = True
         else:
            self.is_modified = False

      res = getoutput("git symbolic-ref -q HEAD", w_dir)
      if res is None:
         self.is_detached_head = True
      else:
         self.is_detached_head = False

      res = getoutput(f"git branch -r --contains HEAD | grep -v HEAD", w_dir).strip() if self.branch else None
      if res is None:
         self.has_tracking_branch = False
      else:
         self.has_tracking_branch = True
         
   def show(self):
      print(f"{self.dir_name}: {self.is_detached_head} {self.is_modified} {self.branch},{self.commit} {self.has_tracking_branch} {self.url}")

def dump_repos_state():
   dirs = os.listdir(os.getcwd())
   repo_states = []
   for w_dir in dirs:
      if not w_dir.startswith(".") and os.path.isdir(w_dir) and os.path.exists(os.path.join(w_dir, ".git")):         
         repo_state = RepoState()
         repo_state.load_state(w_dir)
         repo_states.append(repo_state)

   return repo_states
                            

if __name__ == "__main__":
   g3d_config_fn = sys.argv[1]
   repos = dump_repos_state()
   if 0:
      for repo in repos:
         repo.show()

   local_mods = False
   no_tracking_branch = False
   for repo in repos:
      if repo.is_modified:
         local_mods = True
         print("locally modified repo ", repo.dir_name)
      if repo.has_tracking_branch == False:
         no_tracking_branch = True
         print("no tracking branch in repo ", repo.dir_name)
         
   if local_mods:
      print("giving up, will exit")
      sys.exit(12)
      
   if 1:
      repos_d = [r.__dict__ for r in repos]
      with open(g3d_config_fn, 'w') as f:
         f.write(json.dumps(repos_d, indent = 2))
